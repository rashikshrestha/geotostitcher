#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.5
#  in conjunction with Tcl version 8.6
#    Oct 14, 2022 01:22:42 PM +0545  platform: Linux

import sys
import tkinter as tk
from tkinter import filedialog
import tkinter.ttk as ttk
from tkinter.constants import *
import time

from stitcher_program import Stitcher
import project1

def auto_fill():
    global stitcher, _w1
    input_dir = '/home/rashik/workspace/geoautomation/mrcsource-pave'
    output_dir = '/home/rashik/workspace/geoautomation/mrcsource-pave-out'
    config_file = '/home/rashik/workspace/geoautomation/stitch_config.yaml'

    #! Add texts to the Entries
    _w1.input_dir.insert(0, input_dir)
    _w1.output_dir.insert(0, output_dir)
    _w1.config_file.insert(0, config_file)


def select_input_dir():
    global stitcher, _w1
    dir = filedialog.askdirectory()
    _w1.input_dir.insert(0, dir)


def select_output_dir():
    global stitcher, _w1
    dir = filedialog.askdirectory()
    _w1.output_dir.insert(0, dir)


def select_config_file():
    global stitcher, _w1
    file_path = filedialog.askopenfilename()
    _w1.config_file.insert(0, file_path)


def start_preprocess():
    global stitcher, _w1
    stitcher.input_dir = _w1.input_dir.get()
    stitcher.output_dir = _w1.output_dir.get()
    stitcher.config_file = _w1.config_file.get()
    stitcher.preprocess()
    _w1.no_of_rec['text'] = len(stitcher.recs)
    _w1.project_name['text'] = stitcher.project_name


def start_process_pgf():
    global stitcher, _w1, root
    threads = int(_w1.pgf_threads.get())

    recordings = stitcher.recs

    for rec in recordings:
        _w1.process_pgf_rec['text'] = rec
        stitcher.process_pgf(rec, threads)
        total = stitcher.exe.total_commands
    
        done = False
        while not done:
            percent, count, done = stitcher.exe.get_progress()
            _w1.process_pgf['value'] = percent
            _w1.process_pgf_status['text'] = f"{count}/{total}"
            root.update_idletasks()
            root.update()
            time.sleep(0.05)
    
    print("Finish PGF")





def close_program():
    global root
    root.destroy()
        

def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1, stitcher
    _top1 = root
    _w1 = project1.Toplevel1(_top1)
    stitcher = Stitcher()
    root.mainloop()

if __name__ == '__main__':
    project1.start_up()




